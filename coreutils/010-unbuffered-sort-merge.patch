diff --git a/src/sort.c b/src/sort.c
--- a/src/sort.c
+++ b/src/sort.c
@@ -374,6 +374,8 @@
    number are present, temp files will be used. */
 static unsigned int nmerge = NMERGE_DEFAULT;
 
+static bool mergeonly;
+
 /* Output an error to stderr using async-signal-safe routines, and _exit().
    This can be used safely from signal handlers,
    and between fork() and exec() of multithreaded processes.  */
@@ -1737,6 +1739,22 @@
   return ptr;
 }
 
+static size_t delim_fread(char* buf, int size, FILE* fp)
+{
+    const char* lim = buf + size;
+    char* it = buf;
+    while (it < lim)
+    {
+       int c = getc(fp);
+       if (c == EOF)
+           break;
+       *(it++) = c;
+       if (c == '\n')
+           break;
+    }
+    return it - buf;
+}
+
 /* Fill BUF reading from FP, moving buf->left bytes from the end
    of buf->buf to the beginning first.  If EOF is reached and the
    file wasn't terminated by a newline, supply one.  Set up BUF's line
@@ -1777,7 +1795,7 @@
              rest of the input file consists entirely of newlines,
              except that the last byte is not a newline.  */
           size_t readsize = (avail - 1) / (line_bytes + 1);
-          size_t bytes_read = fread (ptr, 1, readsize, fp);
+          size_t bytes_read =  mergeonly ? delim_fread(ptr, readsize, fp) : fread (ptr, 1, readsize, fp);
           char *ptrlim = ptr + bytes_read;
           char *p;
           avail -= bytes_read;
@@ -1833,7 +1851,7 @@
             }
 
           ptr = ptrlim;
-          if (buf->eof)
+          if (buf->eof || mergeonly)
             break;
         }
 
@@ -3840,7 +3858,7 @@
       nfiles -= in - out;
     }
 
-  avoid_trashing_input (files, ntemps, nfiles, output_file);
+  // avoid_trashing_input (files, ntemps, nfiles, output_file);
 
   /* We aren't guaranteed that this final mergefiles will work, therefore we
      try to merge into the output, and then merge as much as we can into a
@@ -4195,7 +4213,6 @@
   char const *s;
   int c = 0;
   char checkonly = 0;
-  bool mergeonly = false;
   char *random_source = NULL;
   bool need_random = false;
   size_t nthreads = 0;
